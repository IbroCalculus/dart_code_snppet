
Future getInternetData() async {
  await Future.delayed(Duration(seconds: 2));
  return 'Request completed successfully';
}

----- Async / Await ----

Future<void> main() async {
  print("Welcome to test page");

  try{
    var futureResponse = await getInternetData();
    print("Future response: $futureResponse");
  }catch(e){
    print("Response error: $e");
  }

  print("Executed after welcome!");

}


----- then / catchError ----

Future<void> main() async {
  print("Welcome to test page");

  getInternetData().then((responseData){
    print("Response data: $responseData");
  }).catchError((responseError){
    print("Response error: $responseError");
  });

  print("Executed after welcome!");

}



*** DIFFERENCE BETWEEN THE ABOVE 2 METHODS ***
- Async / await: The code is made to execute like a synchrnous code, it must complete executing the Future method before proceeding the print("Executed after welcome!");
- then / catchError: The Future is ran asynchrounously with the line of code, executes the then method after completing the Future process.