CHECK ALSO: Abstract class.txt and Interface.txt, Mixins.txt

NB: If class 'User' is located in file 'user.dart', To use it within the file main.dart, do...

class User {
  var fName;
  var _sName;
  var _age;

  void sayHello() {
    print("Hello user!");
  }
}

----- in main.dart -----
import 'user.dart';			// This auto imports, if not, then do manually

void main() {
  User user = new User();	//the keyword 'new' is negligible
  user.fName = "Ibrahim";
  user.sayHello();
}


==========================CLASSES AND OBJECT =====================================
class Person{
  String name = 'Max';
  int age = 46;

  fullName() => print("Your full name is : &{name} &age}
}

void main(){

  Person p1 = Person();
  //var p1 = Person();
  print(p1.name);

  p1.name = "James";
  p1.age = 56;
  p1.fullName()

}


==================== CONSTRUCTOR ========================
Dart support constructor overloading, but not slightly different from other languages.
Check below for overloading constructor

class Person{
  String name = "";
  int age = 0;


  Person(){
   print("Your name is ${this.name}, and age is ${this.age});
}

  Person(String name, int age){
    this.name = name;
    this.age = age;
}
 
  --- Alternatively ---
  Person(this.name, this.age);

}

void main(){

  var p1 = Person("Ibrahim", 34);
  print(p1.age);
}

-------- OVERLOADING CONSTRUCTOR ------------

class Person {
  String firstName;
  String? lastName;
  int? age;

  Person(this.firstName, this.lastName);  // Default constructor
  Person.withAge(this.firstName, this.lastName, this.age);  // Constructor overloading
  Person.withOnlyFirstName(this.firstName);  // Constructor overloading
}

  Person person = Person("Ibrahim", "Suleiman");
  Person person2 = Person.withAge("Ibrahim", "Musa", 19);
  Person person3 = Person.withOnlyFirstName("Yakubu");


-------- USING NAMED ARGUMENTS ------------

void main(){
  var person1 = Person(age: 56, fName: "Ibrahim");
}

class Person{
  String fName;
  int age;
  String nickName;

  Person({required this.fName, required this.age, this.nickName = "Nicki"}){
    print("You are welcome Mr ${this.fName}, whose nickname is ${this.nickName}");
  }
}


==================== INHERITANCE ===================

class Person {
  String firstname;
  String? lastname;
  int age;

  Person({required this.firstname, this.lastname, required this.age}){
    print('This the initialization phase');
  }

  void welcomePerson() {
    print('Hello $firstname $lastname! You are $age years old.');
  }
}

****** METHOD 1 OF CREATING AN INHERITANCE (Recommended) *******

import 'person.dart';

class Person2 extends Person {
  String location;
  int postalAddress;

  Person2({
    required super.firstname,
    super.lastname,
    required super.age,
    required this.location,
    required this.postalAddress,
  });

  void displayLocation() {
    print('Location: $location, Postal Address: $postalAddress');
  }

  @override
  void welcomePerson() {
    print("welcome to person2");
    super.welcomePerson();
  }
}

****** METHOD 2 OF CREATING AN INHERITANCE *******

import 'person.dart';

class Person2 extends Person {
  String location;
  int postalAddress;

  Person2({
    required String firstname,
    String? lastname,
    required int age,
    required this.location,
    required this.postalAddress,
  }) : super(firstname: firstname, lastname: lastname, age: age);

  void displayLocation() {
    print('Location: $location, Postal Address: $postalAddress');
  }

  @override
  void welcomePerson() {
    print("welcome to person2");
    super.welcomePerson();
  }
}


******** USAGE ********

  var p1 = Person(firstname: 'John', lastname: 'Doe', age: 30);
  var p2_1 = Person2(firstname: 'John', lastname: 'Doe', age:56, location: '123 Main St', postalAddress: 563490);
  p2_1.welcomePerson();



==================== STATIC KEYWORD ===================
class MyClass {
  static int staticVariable = 42;
  static double PI = 3.142;

  static void staticMethod() {
    print("This is a static method.");
  }
}

  print(MyClass.PI);