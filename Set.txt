
  Set names = {"Ibro","ibro","Aboy"};
  print(names);
  print(names.length);

 
==== NB: Set is case sensitive. ie; Ab is not same as ab. To do otherwise, use the method below; ====

  Set<String> names = LinkedHashSet<String>(
    equals: (a, b) => a.toLowerCase() == b.toLowerCase(),
    hashCode: (o) => o.toLowerCase().hashCode,
  );

  names.addAll(["Ibro", "ibro", "Aboy"]);
  print(names); // Output: {Ibro, Aboy}


<<<<<<< HEAD
=================== SET OPERATIONS =========================

  var setA = {1, 2, 3, 4};
  var setB = {3, 4, 5, 6};

  // Union: Combines all unique elements
  print(setA.union(setB)); // Output: {1, 2, 3, 4, 5, 6}

  // Intersection: Common elements
  print(setA.intersection(setB)); // Output: {3, 4}

  // Difference: Elements in setA but not in setB
  print(setA.difference(setB)); // Output: {1, 2}




=======
>>>>>>> 23508097b07a530556bc0a60b06437648315803f
------------- If set contains a particular value -----------
  print(myList.contains("Three"));


=========================== SET OF A CLASS's OBJECT ==================

class Person{
  String? fName;
  String? lName;
  Person(this.fName, this.lName);


---- These additional codes will let it function properly when used in a set ---
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;

    return other is Person &&
        other.fName == fName &&
        other.lName == lName;
  }

  @override
  int get hashCode => fName.hashCode ^ lName.hashCode;
}
------


  Set<Person> people = <Person>{};
  people.add(Person("John", "Doe"));
  people.add(Person("Jane", "Doe"));
  people.add(Person("John", "Doe"));

  print("Number of people ${people.length}");	// OUTPUT: 2, else would have been 3