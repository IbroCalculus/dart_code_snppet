Futures in dart, are like Promises in JavaScript. They represent the result of an asynchronouse task that takes some time to complete.
They have 2 states. The uncompleted state, which is from when the request is made, until when it is still being processed, and the completed state, which is when the request is done processing and returned either a resolved or an error if something goes wrong.

In other words:
A Future represents a value that will be available at some point in the future. It's like a promise that a value or an error will be provided later. Futures are used for operations that take time to complete, such as:

Fetching data from the internet
Reading a file
Waiting for a user action

** How Does a Future Work?
Creating a Future: You create a Future when you have an operation that won't complete immediately.

Completing a Future: The Future completes with either a value (if the operation was successful) or an error (if something went wrong).

Using a Future: You use then, catchError, and whenComplete methods to handle the value or error when the Future completes.


==== Example 1 =====

// Simulating a network request that takes 2 seconds to complete

Future<String> fetchUserName() async {
  await Future.delayed(Duration(seconds: 2)); // Simulating delay
  return 'John Doe'; // Returning the result
}

void main() {
  print('Fetching user name...');
  
  // Using the Future
  fetchUserName().then((name) {
    print('User name: $name');
  }).catchError((error) {
    print('Error: $error');
  });
  
  print('This message is printed immediately.');
}

------ OR USE ASYNC and AWAIT INSTEAD ---------

// Future<void> main() async {
void main() async {
  print('Fetching user name...');

  try {
    final post = await fetchUserName();
    print('User name: $name');
  } catch (error) {
    print('Error: $error');
  }





==== Example 2=====

class Post{
  String title;
  int userId;
  Post({required this.title, required this.userId});
}


Future<Post> fetchPost(){
  const delay = Duration(seconds: 3);
  return Future.delayed(delay, (){
    return Post(userId: 123, title: "My post");

  });

}


void main() {

  fetchPost().then((post){
    print(post.title);
    print(post.userId);
  }
  );

}


